### 注册登录

认证 授权等



### 选课

课程类别，课程数量



### 退课



### 管理员操作





>目前已经实现了前后端分离，`nginx`反向代理，基于JWT的登录认证，关于商品管理和订单管理的业务问题先缓一缓
>
>接下来打算：
>
>1. 调通基于spring的service层和`top.inewbie.service.dao`层（目前业务逻辑是在controller层写死的）
>2. 考虑把`redis`，分布式和负载均衡加进来，比如说高并发的登录，或者登录后高并发的做某件事，比如选课！这时候课程就是商品，每个人选完后提交就是一个高并发的过程，考虑用前面提到的技术来解决这个问题。有点类似秒杀场景？
>3. 实现一个授权功能，比如说是学生登录还是老师登录。





### 杂项

#### 关于SSM项目搭建



#### 关于注解

Spring 2.5 中除了提供 @Component 注释外，还定义了几个拥有特殊语义的注释，它们分别是：@Repository、@Service 和 @Controller。
在目前的 Spring 版本中，这 3 个注释和 @Component 是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。
虽然目前这3 个注释和 @Component 相比没有什么新意，但 Spring 将在以后的版本中为它们添加特殊的功能。
所以，如果 Web 应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用上述注解对分层中的类进行注释。

@Service用于标注业务层组件

@Controller用于标注控制层组件（如struts中的action）

@Repository用于标注数据访问组件，即DAO组件

@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。
